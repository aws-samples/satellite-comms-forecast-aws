AWSTemplateFormatVersion: '2010-09-09'

Description: "Sets up the satcom Bedrock kbase with associated data source and agent"

# parameters to pass to the CFN
Parameters:

    AmazonBedrockExecutionRoleForKnowledgeBasearn:
      Type: String
      Description: Execution Role for Knowledge Base Arn. Get from output of previous stack
      
    AOSSIndexName:
      Type: String
      Description: Name of vector index in the Amazon OpenSearch Service Serverless (AOSS) collection. Get the name from output section of previous stack
      Default: "satcom-aoss-index"
    
    CollectionArn:
      Type: String
      Description: Collection Arn from the previous stack.
      
    KnowledgeBaseName:
      Type: String
      Description: Name of the Kbase for Bedrock
      Default: "satcom-kbase-bedrock"
    
    KnowledgeBaseArticlesBucket:
      Type: String
      Description: Bucket for all of the satcom article assets for knowledge-base
      Default: "satcom-kbase-bkt"
      
    AgentName:
      Type: String
      Description: The name of the Bedrock agent.
      Default: "satcom-fm-agent"
      

# creation of AWS resources        
Resources:

  # role for Bedrock agent execution
  AmazonBedrockExecutionRoleForAgentsQA:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AmazonBedrockExecutionRoleForSatcomAgent
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: bedrock.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess

  # Bedrock knowledge base with Opensearch Serverless vector collection
  # create a Bedrock kbase for our satcom articles
  KnowledgeBaseWithAoss:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Name: !Ref KnowledgeBaseName
      RoleArn: !Ref AmazonBedrockExecutionRoleForKnowledgeBasearn
      KnowledgeBaseConfiguration:
        Type: "VECTOR"
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: !Sub "arn:${AWS::Partition}:bedrock:${AWS::Region}::foundation-model/amazon.titan-embed-text-v2:0"
      StorageConfiguration:
        Type: "OPENSEARCH_SERVERLESS"
        OpensearchServerlessConfiguration:
          CollectionArn: !Ref CollectionArn
          VectorIndexName: !Ref AOSSIndexName
          FieldMapping:
            VectorField: "vector"   # must be same name as AOSS vector field name
            TextField: "AMAZON_BEDROCK_TEXT_CHUNK"
            MetadataField: "AMAZON_BEDROCK_METADATA"
        
  # associate our S3 bucket data source for relevant articles
  # NOTE - don't forget to SYNC after you add articles to the Kbase
  SampleDataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      KnowledgeBaseId: !Ref KnowledgeBaseWithAoss
      Name: !Sub "${KnowledgeBaseName}-datasource"
      DataSourceConfiguration:
        Type: "S3"
        S3Configuration:
          BucketArn: !Sub "arn:${AWS::Partition}:s3:::${KnowledgeBaseArticlesBucket}"
          
  # finally create the Agent with our chosen foundational model
  AgentResource:
      Type: AWS::Bedrock::Agent
      Properties:
        AgentName: !Ref AgentName
        AgentResourceRoleArn: !GetAtt AmazonBedrockExecutionRoleForAgentsQA.Arn
        AutoPrepare: true
        FoundationModel: "anthropic.claude-3-sonnet-20240229-v1:0"
        Instruction: "Provide summary answers to user questions using the articles in the knowledge base"
        Description: "Satcom agent to answer questions on satellite topics using S3 kbase"
        IdleSessionTTLInSeconds: 600
        KnowledgeBases:
          - KnowledgeBaseId: !Ref KnowledgeBaseWithAoss
            Description: "Answer based only on information contained in knowledge base."
            KnowledgeBaseState: ENABLED     
  
  AgentAliasResource:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !Ref AgentResource
      AgentAliasName: !Sub "${AgentName}-alias"
  

# outputs to use in the next stack  
Outputs:
  
  AgentResourceId:
    Value: !Ref AgentResource
  AgentAliasResourceId:
    Value: !GetAtt AgentAliasResource.AgentAliasId

  